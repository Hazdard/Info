Quand un ordinateur exécute un service réseau, il ouvre une construction réseau appelé 'port' pour recevoir la connection. Les ports sont nécessaire pour faire plusieurs requêtes réseau ou avoir plusieurs services tournant en même temps (Ex: avoir plusieurs pages web). Les connections réseau se font entre deux ports (un port ouvert sur le serveur, et un port aléatoire sur notre machine, Ex : pour se accéder à une page web, notre ordinateur peut ouvrir le port 42420 pour se connecter au port 443 du serveur).
Chaque ordinateur a un total de 65535 ports disponibles, mais la plupart sont enregistrés comme des ports standards. Exemples : HTTP se trouve quasiment tout le temps sur le port 80, HTTPS sur le 443, SSH sur le 22, SMB sur le 445, etc ...Cependant ces ports standards peuvent bien entendu être modifiés.
Si on ne sait pas quels ports d'un serveur sont ouverts, on peut utiliser Nmap pour les scanner. De plus Nmap est capable de chercher les services tournant sur chaque ports, utiliser des scripts, voir même lancer des exploits: bref la totale.


NMAP 


La doc du site est incroyable (voir le book).

Lire le man c'est cool ! Quelques infos : Il est souvent utile de mettre le niveau de verbosité à 2 ou plus(-vv). On peut rediriger la sortie dans un fichier dans un format spécial avec une options (-oN ou -oA ou -oG). -A pour un scan aggressif. Le timing et les ports scannés sont aussi paramétrables. -p- pour scanner tous les ports
Lorsque l'on scanne avec Nmap, il y a 3 types basiques de scan : TCP Connect Scans (-sT); SYN "Half-open" Scans (-sS); UDP Scans (-sU) . En plus, il y a aussi des scans moin courants : TCP Null Scans (-sN); TCP FIN Scans (-sF); TCP Xmas Scans (-sX).
-O pour activer la détection de l'OS ; -sC pour activer les scripts par défaut ; -sV pour avoir la version des programmes tournant sur la machine ; -A pour le mode aggressif : détecte l'OS, détecte les versions, scanne avec des scripts et fait une traceroute.
La plupart de ces scans (sauf le UDP) sont utilisés pour des buts très similaires, mais le fonctionnement des scans est variable. Il faut donc garder à l'esprit que même si on est habitué à un scan, d'autres types existent et peuvent êtres utiles.

Les TCP Connect Scans (-sT) : 
* Se rappeler du 'three-way handshake' *
Un TCP Connect scan fonctionne aussi en utilisant le 'three-way handshake' avec chaque port de la cible, déterminant ainsi si le port est ouvert grâce à la réponse : si un signal SYN est envoyé à un port fermé/inexistant, la cible répond avec un signal RST (Reset), sinon on reçoit un signal SYN/ACK, permettant ainsi à Nmap de déterminer l'état du port. (Le RFC (request For Comments) 793 permet de connaitre les réponses du protocole TCP).
Cependant il existe un troisième cas, celui où le port est filtré par un pare-feu. La plupart de ces derniers sont configurés pour 'drop' les packets arrivant, et Nmap ne reçoit alors aucune réponse, indiquant que le port est filtré. Cependant, avec iptables, il est facile de configurer son pare-feu pour 'reject' les packets, donc renvoyer un signal RST, ce qui rend quasi impossible une lecture précise de l'état des ports de la cible.

Les SYN Scans (-sS) :
Aussi appelés "Half-open" ou "Stealth" scans, ils sont utilisés sur l'intervalle de ports TCP de la cible. Ce scan diffère cependant du scan TCP, car lors de la réception du signal SYN/ACK, notre machine renvoie un signal RST. Les avantages sont que ce scan est beaucoup plus rapide que le TCP ; les stealth scan ne sont souvent pas repérés , car pour être loggé, il faut que la connection soit complète.
Inconvénients : il faut avoir les permissions de sudo pour éxecuter ce scan, car il requiert le pouvoir de créer des packets (alors que le scan TCP éxecute juste le 'three-way handshake' en entier). De plus les services instables peuvent péter un cable à cause de SYN scan.
Au final, il y a beaucoup plus d'avantages que d'inconvénients, ce qui fait que lorsque Nmap est éxecuté avec les permissions sudo, il fait des SYN scan par défaut ; sinon il fait des scans TCP Connect. De plus lorsque l'on fait un SYN scan pour identifier les ports fermés ou filtrés, les mêmes règles s'appliquent qu'au scan TCP Connect : si le port est fermé on reçoit un signal RST ; si le port est filtré on ne reçoit pas de signal, ou on reçoit un signal RST 'spoofed' par le firewall.

Les UDP Scans (-sU) :
A l'inverse de TCP, les connections UDP ne sont pas stables, donc au lieu de faire un 'handshake', UDP va prier pour que la cible reçoive bien les packets envoyés. Cela rend UDP performant pour les connections nécessitant de la vitesse à la place de la qualité, mais cela rend les UDP scans très lents.
Quand un packet est envoyé à un port UDP ouvert, il ne doit pas y avoir de réponse. Dans ce cas, Nmap renvoie un deuxième packet pour vérifier, puis liste le port comme open|filtered ; car si un firewall protège le port, il peut aussi drop les packets arrivants. Si une réponse UDP est reçu (c'est très rare) alors le port est ouvert. Si le port est fermé, alors la cible répond avec un packet ICMP (ping) indiquant que le port est inatteignable.
Les scans UDP étant très long (20 minutes pour les 1000 premiers ports), il est conseillé de lancer le scan Nmap avec `--top-ports <number>` qui va analyser les <number> ports UDP les plus utilisés. Ex : nmap -sU --top-ports 20 <target> va analyser les 20 ports UDP les plus communs, donc avec un temps très acceptable. De plus lorsque Nmap fait des scans sur des ports abritant des services classiques, Nmap va plutôt scanner avec un protocole-payload spécifique qui a plus de chances d'obtenir une réponse valide.

Les NULL; FIN; et XMAS scans (-sN ; -sF ; -sX) :
Ce sont des scans moins utilisés que les précédents, mais il sont tous les 3 liés et tendent à être plus discrets que le SYN scan.
Un NULL scan est une requête TCP avec un signal vide. D'après le RFC 793, la cible répond avec un signal RST quand le port est fermé.
Un FIN scan est presque pareil, mais avec un signal FIN à la place du vide. Nmap s'attends à un signal RST si le port est fermé.
Un XMAS scan envoie un packet TCP malformé (PSH, URG et FIN), et s'attends à un signal RST si le port est fermé.
La réponse attendue par tous ces scan d'un port ouvert est similaire au scan UDP : si le port est ouvert, alors il ne répond pas au packet malformé, cependant c'est aussi le comportement d'un port filtré. Ces scans peuvent donc identifier les ports comme étant : open|filtered, closed, ou filtered. Un port est générallement identifié comme filtré si la cible répond avec un packet ICMP 'unreachable'.
Attention : malgré le fait que le RFC 793 exige qu'une machine réponde à un packet TCP malformé avec un signal RST TCP si le port est fermé et ne réponde pas si le port est ouvert, toutes les machines ne respectent pas cela, en particulier les Microsoft Windows (et les appareils Cisco) qui répondent tout le temps par un signal RST à un signal TCP malformé. Tous les ports sont alors vus comme fermés.
Cependant le but ici est d'échapper au control du pare-feu, qui générallement drop tous les signaux TCP qui ont le flag SYN. Ainsi ces méthodes de scan restent efficaces pour bypass ces types de firewall, même si les systemes modernes sont immunisés contre ces scans.

ICMP Network Sanning (-sn) :
Lorsque l'on se connecte pour la première fois à un réseau sur lequel nous n'avons aucunes informations, notre premier objectif est d'obtenir une 'carte' de la structure de ce réseau, càd sacoir quelles IP ont des hosts actifs.
Nmap propose une options 'ping sweep'=balayage par ping , qui envoie un packet ICMP à toutes les adresses IP possibles pour le réseau spécifié. Quand il reçoit une réponse, il marque l'IP qui a répondue comme alive (active). Cette méthode n'est pas toujours précise mais permet au moins d'avoir un premier regard sur le réseau cible.
Pour faire un ping sweep, on utilise -sn ainsi qu'un intervalle d'ip à tester (avec la notations CIDR ou un -).
Exemple : pour scanner le réseau 192.168.0.x, on peut faire :
`nmap -sn 192.168.0.1-254` OU `nmap -sn 192.168.0.0/24`.
Le -sn dit à Nmap de ne pas scanner tous les ports, mais seulement les réponses ICMP (ou requêtes ARP sur un réseau local, avec les privilèges sudo). En plus, Nmap va aussi envoyer un TCP SYN au port 443 de la cible et un TCP ACK au port 80 de la cible.


LES SCRIPTS NSE :

La doc du site est incroyable (voir le book).

Le Nmap Scripting Engine fourni des scripts écrits dans le langugae Lua, qui peuvent être utilisés pour : scanner des vulnérabilités, automatiser des exploits, etc ... Mais sont particulièrements utiles pour faire de la reconnaissance (garder cependant à l'esprit que les scripts permettent de faire plein de choses).

--script=<category> pour utiliser les scripts d'une catégorie en particulier. Quelques catégories utiles : safe (N'affecte pas la cible) ; intrusive (Chances d'affecter la cible) ; vuln (Cherche des vulnérabilités) ; exploit (Tente d'exploiter une vulnérabilité) ; auth (Tente de bypass l'authentification sur des services en cours, ex : se connecter en anonyme sur un serveur FTP) ; brute (Tente de bruteforce les 'credentials' des services en cours) ; discovery (Tente de fouiller dans les services lancés pour avoir des informations sur la machine).
Pour lancer un ou plusieurs scripts spécifiques, faire --script=<script-name1>,<script-name2>,... Si certains scripts ont besoin d'arguments, on doit faire : --scripts-args <script-name>.<argument1>,<script-name>.<argument2> . Nmap a un menu d'aide pour les scripts : nmap --script-help <script-name> ; cependant la doc en ligne est sans doute mieux fournie.

Pour trouver des scripts, on a deux choix : aller sur https://nmap.org/nsedoc/ pour avoir les scripts officiels ; ou alors chercher sur notre stockage local. Nmap stocke ses scripts dans /usr/share/nmap/scripts ; tous les scripts NSE sont par défaut stockés dans ce dossier, et c'est là que Nmap cherche les scripts quand on les spécifie.
La liste des scripts installés est /usr/share/nmap/scripts/script.db ; on peut grep dedans pour cherche des scripts spécifiques : grep "ftp" /usr/share/nmap/scripts/script.db ; grep "safe" /usr/share/nmap/scripts/script.db
Sinon on peut faire un ls : ls -l /usr/share/nmap/scripts/*ftp*

Si il manque un script dans notre liste locale, on peut faire `sudo apt update && sudo apt install nmap` . Cependant il est aussi possible de télécharger manuellement les scripts depuis le site de Nmap : 
` sudo wget -O /usr/share/nmap/scripts/<script-name>.nse https://svn.nmap.org/nmap/scripts/<script-name>.nse ` ; qui doit être suivi d'un ` nmap --script-updatedb ` qui met à jour script.db 
La même commande doit être faite si on rajoute nos propres scripts à Nmap.


FIREWALL EVASION :

On a déjà vu que les scans SYN, XMAS, NULL, FIN permettaient de passer au travers de certains pare-feu. Cependant, un des problèmes importants de Windows est que son pare-feu par défaut drop les packet ICMP (ping), faisant ainsi penser à Nmap que la machine est éteinte lors de son scan pour établir la connection. Pour bypasser cela, il faut rajouter l'option -Pn qui dit à Nmap que la machine est allumée, et donc pas besoin de ping. Cependant si la machine est eteinte, le scan sera très long car Nmap va double-check tous les ports (sur réseau local, Nmap peut utiliser des requêtes ARP pour déterminer l'activiter d'une machine).
Il y a plusieurs options utiles pour passer au travers des pere-feu :
-f ; fragmente les packets, diminuant les chances qu'ils soient détectés par un firewall ou un IDS (Intrusion Detection System).
--mtu <number> ; définie la taille maximale des packets utilisés pour le scan. Le chiffre DOIT être un multiple de 8.
--scan-delay <time>ms ; ajoute du délai entre deux packets envoyés. Utile pour des scans sur un réseau instable, ou si il y a un tim-based firewall.
--badsum ; génère des packets avec des checksum invalides. Un port TCP/IP réel drop le packet, mais certains firewall répondent automatiquement, sans regarder le checksum. Cette option peut donc être utilisée pour déterminer la présence d'un firewall/IDS.






























